C251 COMPILER V5.60.0,  main                                                               05/08/23  19:23:08  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: E:\smart car\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\
                    -Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\s
                    -rc) DEBUG PRINT(.\Out_File\main.lst) TABS(2) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          main
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32G12K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-12-18
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "headfile.h"
   21          #include <math.h>
   22          extern uint8 byte_buff[10];
   23          extern int move_flag;
   24          //extern void data_pack_Init(char b1,char b2,char s3,char i4,char f5);
   25          /*
   26           *在board_init中,已经将P54引脚设置为复位
   27           *如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
   28           */
   29          
   30          #define DIR P35
   31          int16 dat = 0;
   32          extern res;
   33          #define key1_flag P70
   34          #define key2_flag P36
   35          #define key3_flag P37
   36          #define key4_flag P73
   37          #define key5_flag P44 
   38          #define key6_flag P51 //拨码开关
   39          #define key7_flag P50 //拨码开关
   40          
   41          uint8 key1_status = 1;
   42          uint8 key2_status = 1;
   43          uint8 key3_status = 1;
   44          uint8 key4_status = 1;
   45          uint8 key5_status = 1;
   46          
   47          
   48          //上一次开关状态变量
   49          uint8 key1_last_status;
   50          uint8 key2_last_status;
   51          uint8 key3_last_status;
   52          uint8 key4_last_status;
   53          uint8 key5_last_status;
   54          
   55          //开关标志位
C251 COMPILER V5.60.0,  main                                                               05/08/23  19:23:08  PAGE 2   

   56          uint8 flag1=1;
   57          uint8 flag2=1;
   58          uint8 flag3=1;
   59          uint8 flag4=1;
   60          uint8 flag5=1;
   61          
   62          
   63           
   64          
   65          
   66          
   67          int N = 50; //总步数
   68          int i;
   69          float dx, dy; //计算XY轴位移量
   70          float dxx, dyy; //每步位移量 ?
   71          int ch,sh;
   72          float k;
   73          
   74          int PWMX1,PWMY1,PWMX2,PWMY2,PWMX3,PWMY3,PWMX4,PWMY4;
   75          
   76          void get_pwmxy()
   77          {
   78   1        PWMX1=(byte_buff[0]-byte_buff[8])*1.8+703;
   79   1        PWMY1=(byte_buff[9]-byte_buff[1])*1.8+602;
   80   1      
   81   1        PWMX2=(byte_buff[0]-byte_buff[6])*1.8+703;
   82   1        PWMY2=(byte_buff[7]-byte_buff[1])*1.8+602;
   83   1      
   84   1        PWMX3=(byte_buff[0]-byte_buff[4])*1.8+703;
   85   1        PWMY3=(byte_buff[5]-byte_buff[1])*1.8+600;
   86   1      
   87   1        PWMX4=(byte_buff[0]-byte_buff[2])*1.8+703;
   88   1        PWMY4=(byte_buff[3]-byte_buff[1])*1.8+600;
   89   1      }
   90          
   91          
   92          void moveServo1(int pwmx1, int pwmx2,int pwmy1, int pwmy2)
   93          {
   94   1       //计算XY轴位移量
   95   1      dx = pwmx1-pwmx2;
   96   1      dy = pwmy1-pwmy2; 
   97   1       //计算每步位移量
   98   1       dxx = dx/N;
   99   1       dyy = dy/N;
  100   1        
  101   1      for( i=0; i<N; i++) {
  102   2      
  103   2        if(key7_flag==0)
  104   2        {
  105   3          pwm_duty(PWMA_CH1P_P60,600);// Y   左边 上面     大向下 向左
  106   3          pwm_duty(PWMA_CH2P_P62,703);// X   右边 下面
  107   3          break;
  108   3        }
  109   2        if(key6_flag==0)
  110   2        {
  111   3          i=i-1;
  112   3          pwm_duty(PWMA_CH2P_P62, pwmx2+i*dxx); 
  113   3          pwm_duty(PWMA_CH1P_P60, pwmy2+i*dyy);
  114   3        }
  115   2        else
  116   2       //生成PWM信号控制x轴转动
  117   2      {   pwm_duty(PWMA_CH2P_P62, pwmx2+i*dxx); 
  118   3      
  119   3       //生成PWM信号控制y轴转动
  120   3          pwm_duty(PWMA_CH1P_P60, pwmy2+i*dyy);
  121   3      }
C251 COMPILER V5.60.0,  main                                                               05/08/23  19:23:08  PAGE 3   

  122   2      //延时等待位移完成
  123   2      delay_ms(20); 
  124   2       }
  125   1      
  126   1      }
  127          void frame_deal_F()
  128          {
  129   1          pwm_duty(PWMA_CH1P_P60,600);//Y      左边 上面     大向下 向左         
  130   1          pwm_duty(PWMA_CH2P_P62,703);//X      右边 下面
  131   1          delay_ms(1000); 
  132   1          moveServo1(782,703,538,600);
  133   1          delay_ms(1000);
  134   1          moveServo1(623,782,547,538);
  135   1          delay_ms(1000);
  136   1          moveServo1(623,623,677,547);
  137   1          delay_ms(1000);
  138   1          moveServo1(782,623,671,677);
  139   1          delay_ms(1000);
  140   1          moveServo1(780,782,538,671);
  141   1          delay_ms(1000);
  142   1      }
  143          // 原点  698 620
  144          // 左上  778 556
  145          // 右上  620 561
  146          // 右下  616 692
  147          // 左下  778 692
  148          void frame_deal_S()
  149          {
  150   1          pwm_duty(PWMA_CH1P_P60,600);//Y      左边 上面     大向下 向左         
  151   1          pwm_duty(PWMA_CH2P_P62,703);//X      右边 下面
  152   1          delay_ms(1000); 
  153   1          moveServo1(746,703,608,600);
  154   1          delay_ms(1000);
  155   1          moveServo1(656,746,608,608);
  156   1          delay_ms(1000);
  157   1          moveServo1(656,656,661,608);
  158   1          delay_ms(1000);
  159   1          moveServo1(746,656,661,661);
  160   1          delay_ms(1000);
  161   1          moveServo1(746,746,603,661);
  162   1          delay_ms(1000);
  163   1      }
  164          
  165          // 左上  736 620
  166          // 右上  641 620
  167          // 右下  641 684
  168          // 左下  736 620
  169          
  170          
  171          
  172          int a,b,c,d;
  173          void main()
  174          {
  175   1          WTST = 0;               //设置程序代码等待参数，赋值为0可将CPU执行程序的速度设置为最快
  176   1          
  177   1        DisableGlobalIRQ();   //关闭总中断
  178   1        
  179   1          //sys_clk可选值:35000000，30000000, 27000000. 24000000, 22118400, 20000000, 18432000, 12000000, 11059
             -200, 6000000, 5529600。
  180   1          //设置系统频率，此频率需要跟STC-ISP软件中的 <输入用户程序运行的IRC频率>选项的频率一致。
  181   1          //如果频率设置不对，将会导致串口的数据不正常,PWM的工作不正常等等。
  182   1          sys_clk = 35000000;     //设置系统频率为35MHz
  183   1          
  184   1        board_init();     //初始化寄存器
  185   1        //此处编写用户代码(例如：外设初始化代码等)
  186   1        uart_init(UART_4,UART4_RX_P02,UART4_TX_P03,9600,TIM_2);
C251 COMPILER V5.60.0,  main                                                               05/08/23  19:23:08  PAGE 4   

  187   1        //data_pack_Init(0,10,0,0,0);
  188   1        oled_init();
  189   1        data_pack_Init(0,10,0,0,0);
  190   1        pwm_init(PWMA_CH1P_P60, 50, 0);     //初始化PWMA  使用引脚P6.0  输出PWM频率10000HZ   占空比为百分之 pwm
             -_duty / PWM_DUTY_MAX * 100
  191   1        pwm_init(PWMA_CH2P_P62, 50, 0); 
  192   1        
  193   1        //总中断最后开启
  194   1        EnableGlobalIRQ();    //开启总中断
  195   1        
  196   1      //  moveServo(6, 2000, 1000); //1秒移动1号舵机至2000位置
  197   1      //  moveServo(2, 2000, 500);  
  198   1      //  delay_ms(3000);
  199   1      //  runActionGroup(1, 1); //运行1号动作组1次
  200   1      //  runActionGroup(2, 1);
  201   1      //  delay_ms(1500);
  202   1      //  stopActionGroup();  //停止动作组运行
  203   1          while(1)
  204   1        {
  205   2          key1_last_status = key1_status;
  206   2          key2_last_status = key2_status;
  207   2          key3_last_status = key3_status;
  208   2          key4_last_status = key4_status;
  209   2          key5_last_status = key5_status;
  210   2          //读取当前按键状态
  211   2          key1_status = key1_flag;
  212   2          key2_status = key2_flag;
  213   2          key3_status = key3_flag;
  214   2          key4_status = key4_flag;
  215   2          key5_status = key5_flag;
  216   2      
  217   2          //检测到按键按下之后  并放开置位标志位
  218   2          if(key1_status && !key1_last_status)    flag1 = 0;
  219   2          if(key2_status && !key2_last_status)    flag2 = 0;
  220   2          if(key3_status && !key3_last_status)    flag3 = 0;  
  221   2          if(key4_status && !key4_last_status)    flag4 = 0;
  222   2          if(key5_status && !key5_last_status)    flag5 = 0;
  223   2          
  224   2          
  225   2           if(flag3==0)
  226   2           {
  227   3             flag3=1;
  228   3             frame_deal_F();
  229   3           }
  230   2           if(flag1==0)
  231   2           {
  232   3             flag1=1;
  233   3             frame_deal_S();
  234   3           }
  235   2        
  236   2          if(flag5==0)
  237   2              {
  238   3                 flag5=1;
  239   3                  uart_putchar(UART_4,0xA5);
  240   3              }
  241   2          if(flag4==0)
  242   2              {
  243   3                 flag4=1;
  244   3                 pwm_duty(PWMA_CH1P_P60,600);// Y   左边 上面     大向下 向左
  245   3                 pwm_duty(PWMA_CH2P_P62,703);// X   右边 下面
  246   3                 delay_ms(10);
  247   3              }
  248   2          oled_int16(1,0,byte_buff[0]);
  249   2          oled_int16(1,1,byte_buff[1]);
  250   2          oled_int16(1,2,byte_buff[2]);
  251   2          oled_int16(1,3,byte_buff[3]);
C251 COMPILER V5.60.0,  main                                                               05/08/23  19:23:08  PAGE 5   

  252   2          oled_int16(1,4,byte_buff[4]);
  253   2          oled_int16(1,5,byte_buff[5]);
  254   2          oled_int16(1,6,byte_buff[6]);
  255   2          oled_int16(1,7,byte_buff[7]);
  256   2          oled_int16(40,1,byte_buff[8]);
  257   2          oled_int16(40,2,byte_buff[9]);
  258   2          
  259   2          if(move_flag==1)
  260   2          {           //    -17*2   28 
  261   3      //      k=2;
  262   3      //      sh=580;//y
  263   3      //      ch=680;//x   44,40  61,68    88,48
  264   3      //      pwm_duty(PWMA_CH1P_P60,620);//530
  265   3      //      pwm_duty(PWMA_CH2P_P62,624);//720
  266   3              get_pwmxy();
  267   3              moveServo1(PWMX1,703,PWMY1,600);
  268   3              delay_ms(1000);
  269   3              moveServo1(PWMX2,PWMX1,PWMY2,PWMY1);
  270   3              delay_ms(1000);
  271   3              moveServo1(PWMX3,PWMX2,PWMY3,PWMY2);
  272   3              delay_ms(1000);
  273   3              moveServo1(PWMX4,PWMX3,PWMY4,PWMY3);
  274   3              delay_ms(1000);
  275   3              moveServo1(PWMX1,PWMX4,PWMY1,PWMY4);
  276   3              delay_ms(1000);
  277   3              move_flag=0;
  278   3          }
  279   2          oled_int16(40,3,move_flag);
  280   2          oled_int16(40,4,sh);
  281   2          oled_int16(40,5,ch);  
  282   2      
  283   2          }
  284   1        
  285   1      }
  286          //1个像素点20占空比
  287          
  288          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1527     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        69     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        62     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
